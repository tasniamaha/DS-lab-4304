//formula for finding gcd
int gcd(int a,int b){
    while(b!=0){
        int temp=b;
        b=a%b;
        a=temp;
    }
    return a;
} 
//formula for finding prime
bool isprime(int n){
    if(n<2) return false;
    if(n==2) return true;
    if(n%2==0) return false;
    for(int i=3;i<=sqrt(n);i+=2){
        if(n%i==0){
            return false;
        }
    }
    return true;
}
//hexadecimal to decimal
int hextodec(string s){
    int ind=1;
    int dec=0;
    for(int i=s.length()-1;i>=2;i--){
        int val;
        if(s[i]>='0' && s[i]<='9'){
            val=s[i]-'0';
        }
        else if(s[i]>='A' && s[i]<='F'){
            val=s[i]-'A'+10;
        }
        else if((s[i] >= 'a' && s[i] <= 'f'){
            val=s[i]-'a'+10;
        }
        dec+=val*ind;
        ind*=16;
    }
    return dec;
}
//decimal to hexadecimal
string dectohex(string s){
    int n=stoi(s);
    if (n == 0) return "0x0";
    string hex;
    while(n!=0){
        int rem=n%16;
        if(rem<10 ){
            hex+=rem+'0';
        }
        else {
            hex+=rem-10+'A';
        }
        n/=16;
    }
    reverse(hex.begin(), hex.end());
    return "0x"+hex;
}
//recursive approach for binary exponentiation
int BinaryExponentiation(int base,int power){
    if(power==0){
        return 1;
    }
    int  sqrtvalue=BinaryExponentiation(base,power/2);
    if(power%2){
        return sqrtvalue*sqrtvalue*base;
    }
    else return sqrtvalue*sqrtvalue;
}
//function for finding index of lower bound(lowest element greater than x)
ll lower_bound(const vector<ll>&a,ll i){
    ll start=0,end=a.size()-1;
    ll ans=a.size();
    while(start<=end){
        ll mid=start+(end-start)/2;
        if(a[mid]>=i){
            ans=mid;
            end=mid-1;
        }
        else{
            start=mid+1;
        }
    }
    return ans;
}
//prefix sum
void calculatePrefixSum(const vector<int>& arr, vector<int>& prefix) {
    int n = arr.size();
    prefix[0] = arr[0];
    for (int i = 1; i <=n; i++) {
        prefix[i] = prefix[i - 1] + arr[i-1];
    }
}
//to check whether array is sorted in non decreasing order
bool is_array_sorted(vector<int>&a){
    bool sort=true;
    for(int i=0;i<a.size()-1;i++){
        if(a[i]>a[i+1]){
            sort=false;
            break;
        }
    }
    return sort;
}
//decimal to binary
void recursion(ll n){
    if(n==0) return;
    
    recursion(n/2);
    cout<<n%2;
}
//finding divisor using precomputation
vector<int>a(1e6+5);
for(int i=1;i<=a.size();i++){
    // cout<<i<<"="<<" ";
    for(int j=i;j<=a.size();j+=i){
        a[j]++;
        // cout<<a[j]<<"\n";
    }
}
int sumofdigits(int n){
    int sum=0;
    while(n!=0){
        sum+=(n%10);
        n/=10;
    }
    return sum;
}
//dsu without using rank
vector<int>parent;
void makeset(int n){
    parent.resize(n);
    for(int i=0;i<n;i++){
        parent[i]=i;
    }
}
int find(int u){
    if(parent[u]==u) return parent[u];
    else return find(parent[u]);
}
void uni(int u,int v){
    int ri=find(u);
    int rj=find(v);
    if(ri!=rj){
        parent[rj]=ri;
    }
}